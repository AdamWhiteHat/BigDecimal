<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFrameworks>net45;net46;net48;netstandard2.1;netcoreapp3.1;net5.0;net6.0;net7.0</TargetFrameworks>
		<PlatformTarget>AnyCPU</PlatformTarget>
		<OutputType>Library</OutputType>
		<Nullable>enable</Nullable>
		<LangVersion>latest</LangVersion>
		<AnalysisLevel>latest</AnalysisLevel>
		<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>
		<GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>
		<EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
	</PropertyGroup>

	<PropertyGroup>
		<RootNamespace>ExtendedNumerics</RootNamespace>
		<Title>ExtendedNumerics.BigDecimal</Title>
		<Product>ExtendedNumerics.BigDecimal</Product>
		<AssemblyName>ExtendedNumerics.BigDecimal</AssemblyName>
		<AssemblyTitle>ExtendedNumerics.BigDecimal</AssemblyTitle>
		<PackageId>ExtendedNumerics.BigDecimal</PackageId>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<Authors>Adam White, Jan Christoph Bernack, Rick Harker</Authors>
		<Copyright>Adam White. MIT License. See License.</Copyright>
		<Description>An arbitrary precision decimal (base 10) floating point number type using a mantissa and exponent. Supports nth roots, trigonometric functions, logarithms, natural e, pi, etc.</Description>
		<PackageTags>math mathematics arbitrary-precision floating-point decimal arithmetic trigonometry logarithms numerics numbers biginteger bigdecimal hyperbolic inverse trigonometric sine cosine tangent secant circular angles sin cos tan mantissa exponent floating point base10 csharp</PackageTags>
		<PackageProjectUrl>https://www.nuget.org/packages/ExtendedNumerics.BigDecimal/</PackageProjectUrl>
		<RepositoryUrl>https://github.com/AdamWhiteHat/BigDecimal</RepositoryUrl>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryType>git</RepositoryType>

		<Version>$([System.DateTime]::Now.ToString("yyyy."$([System.DateTime]::Now.DayOfYear)".HHmm"))</Version>
		<AssemblyVersion>$([System.DateTime]::Now.ToString("yyyy."$([System.DateTime]::Now.DayOfYear)".HHmm"))</AssemblyVersion>
		<FileVersion>$([System.DateTime]::Now.ToString("yyyy."$([System.DateTime]::Now.DayOfYear)".HHmm"))</FileVersion>
	</PropertyGroup>

	<PropertyGroup>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<WarningsAsErrors>NU1605</WarningsAsErrors>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
	</PropertyGroup>

	<Choose>
		<When Condition="'$(Configuration)'=='Debug'">
			<PropertyGroup>
				<DebugSymbols>true</DebugSymbols>
				<DebugType>full</DebugType>
				<Optimize>False</Optimize>
				<DefineConstants>$(DefineConstants);DEBUG;VERBOSE;</DefineConstants>
				<WarningLevel>2</WarningLevel>
				<NoWarn>1701;1702;CA1724</NoWarn>
			</PropertyGroup>
		</When>
		<When Condition="'$(Configuration)'=='Release'">
			<PropertyGroup>
				<DebugSymbols>false</DebugSymbols>
				<Optimize>True</Optimize>
				<WarningLevel>1</WarningLevel>
				<DefineConstants>$(DefineConstants);</DefineConstants>
			</PropertyGroup>
		</When>
	</Choose>

	<ItemGroup>
		<None Include="..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Roslynator.Analyzers" Version="4.0.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Properties\Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Properties\Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>
</Project>