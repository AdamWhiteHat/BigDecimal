namespace TestBigDecimal;

using ExtendedNumerics;
using NUnit.Framework;
using System;
using System.Numerics;

[Parallelizable( ParallelScope.All )]
[TestFixture]
public class TestBigDecimalCritical
{

	[Test]
	public void Test47()
	{
		var π1 = 1 * BigDecimal.π;
		var π2 = 2 * BigDecimal.π;
		var π4 = 4 * BigDecimal.π;
		var π8 = 8 * BigDecimal.π;
		var sum = π1 + π2 + π4 + π8;
		var actual = sum.WholeValue;
		var expected = ( BigInteger )47;

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestConstructor0()
	{
		BigDecimal expected = 0;
		var actual = new BigDecimal( 0 );

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestConstructor00()
	{
		BigDecimal expected = 0;
		var actual = new BigDecimal( 0, 0 );

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestConstructor001D()
	{
		var i = BigDecimal.Parse( "0.5" );
		var j = BigDecimal.Parse( "0.01" );

		Assert.AreEqual( "0.5", i.ToString() );
		Assert.AreEqual( "0.01", j.ToString() );
	}

	[Test]
	public void TestConstructor001WriteLineA()
	{
		var π = ( BigDecimal )3.141592793238462m;
		var d = new BigDecimal( 3141592793238462, -15 );
		TestContext.WriteLine( "π = " + π );
		TestContext.WriteLine( "d = " + d );

		Assert.AreEqual( π, d );
	}

	[Test]
	public void TestConstructor001WriteLineB()
	{
		const Decimal m = 0.0000000000000001m;

		var e = new BigDecimal( 1000000000, -25 );
		var h = ( BigDecimal )m;

		TestContext.WriteLine( "m = " + m );
		TestContext.WriteLine( "e = " + e );
		TestContext.WriteLine( "h = " + h );

		Assert.AreEqual( h.ToString(), e.ToString() );
	}

	[Test]
	public void TestConstructor002()
	{
		var f = new BigDecimal( -3, -2 );
		Assert.AreEqual( "-0.03", f.ToString() );
	}

	[Test]
	public void TestConstructor003()
	{
		var g = new BigDecimal( 0, -1 );
		Assert.AreEqual( "0", g.ToString() );
	}

	[Test]
	public void TestConstructor004()
	{
		var h = BigDecimal.Parse( "-0.0012345" );
		Assert.AreEqual( "-0.0012345", h.ToString() );
	}

	[Test]
	public void TestConstructorToString123456789()
	{
		const Int32 numbers = 123456789;
		var expected = numbers.ToString();
		var actual = new BigDecimal( numbers ).ToString();

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestNormalizeB()
	{
		var expected = BigDecimal.Parse( "1000000" );
		var actual = new BigDecimal( 1000000000, -3 );

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestParse001()
	{
		const String expected = "0.00501";
		var result = BigDecimal.Parse( expected );
		var actual = result.ToString();

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestParse002()
	{
		var result1 = BigDecimal.Parse( "" );
		Assert.AreEqual( result1, BigDecimal.Zero );

		var result2 = BigDecimal.Parse( "0" );
		Assert.AreEqual( result2, BigDecimal.Zero );

		var result3 = BigDecimal.Parse( "-0" );
		Assert.AreEqual( result3, BigDecimal.Zero );
	}

	[Test]
	public void TestParse0031()
	{
		const String expected = "-123456789";
		var actual = BigDecimal.Parse( expected ).ToString();

		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestParse0032()
	{
		const String expected = "123456789";
		var bigDecimal = BigDecimal.Parse( expected );
		var actual = bigDecimal.ToString();
		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestParse0033()
	{
		const String expected = "1234.56789";
		var actual = BigDecimal.Parse( expected ).ToString();
		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestParseEpsilon()
	{
		var actual = BigDecimal.Parse( "4.9406564584124654E-324" );
		var expected = ( BigDecimal )Double.Epsilon;
		Assert.AreEqual( expected, actual );
	}

	[Test]
	public void TestTruncate()
	{
		const String inputTruncated =
			
		const String inputOverflow = "919919200639429489197056";

		var expectedResult = BigDecimal.Parse( inputTruncated );
		var result = BigDecimal.Parse( String.Concat( inputTruncated, inputOverflow ) );
		result = BigDecimal.Truncate( result, 5000 );
		var success = expectedResult.Equals( result );

		Assert.IsTrue( success );
	}
}